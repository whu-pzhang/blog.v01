FFTW库的使用
##################

:author: pzhang
:date: 2015-12-06
:category: Programming
:tags: FFTW，C
:slug: use-fftw3

.. contents::

FFTW 是用C语言写成的函数库，用来计算DFT。其输入的信号长度可以是任意长度，
实信号或者复数信号都可以。其采用 GNU General Public License授权，可以比较
放心地使用。

其在Linux或者Window下都可以使用。本文记录在Linux下的使用。
目前还没有在Window下使用的需求。所以暂且不表。

安装
============

安装最简单的就是直接通过源来安装

::

    $ sudo yum install fftw fftw-devel

当然了，也可以下载源码包自行编译。

官方地址：http://www.fftw.org/download.html

使用
=============

通过源安装的话，FFTW会自动加入系统动态链接库中，不需要更多的设置即可使用。

若是自行编译安装，则需要自己将FFTW的include以及lib目录加入到\ ``LD_LIBRARY_PATH``\
中,或者每次编译链接程序时手动指定\ ``-I``\和\ ``-L``\选项。

使用例子：

.. code-block:: C

    #include <stdio.h>
    #include "fftw3.h"

    #define N 10

    int main(void)
    {
        int i;
        fftw_complex *data;
        fftw_plan p;

        data = (fftw_complex *)fftw_malloc(sizeof(fftw_complex) * N);
        // initialize and display the original data
        printf("Original Data:\n");
        for (i=0; i<N; i++) {
            data[i][0] = i+1;
            data[i][1] = 0.0;
            printf("data[%d] = (%.2f + j %.2f)\n", i, data[i][0], data[i][1]);
        }

        p = fftw_plan_dft_1d(N, data, data, FFTW_FORWARD, FFTW_ESTIMATE);
        fftw_execute(p);
        fftw_destroy_plan(p);
        fftw_free(data);

        printf("\n");

        printf("After FFTW:\n");
        for (i=0; i<N; i++) {
            printf("data[%d] = (%.2f + j %.2f)\n", i, data[i][0], data[i][1]);
        }
        return 0;
    }

- **程序说明**

#. \ ``fftw_complex``\：FFTW自定义的复数类型，是一个包含两个\ ``double``\元素的数组，第一个值为实数部分，第二个为虚数部分
#. \ ``fftw_malloc``\：类似于\ ``malloc``\的函数，分配复数类型的内存
#. \ ``fftw_plan_dft_1d``\：产生一个准备工作，并不会真的执行DFT，到\ ``fftw_execute``\才是执行DFT

    - \ ``N``\： DFT数据点数
    - \ ``in``\和\ ``out``\： 输入和输出
    - \ ``FORWARD``\ 表示正变换，\ ``BACKWARD``\为逆变换


编译链接
::

    $ gcc -g fftw_test.c -lfftw3 -o fftw_test
    $ ./fftw_test

输出

::

    Original Data:
    data[0] = (1.00 + j 0.00)
    data[1] = (2.00 + j 0.00)
    data[2] = (3.00 + j 0.00)
    data[3] = (4.00 + j 0.00)
    data[4] = (5.00 + j 0.00)
    data[5] = (6.00 + j 0.00)
    data[6] = (7.00 + j 0.00)
    data[7] = (8.00 + j 0.00)
    data[8] = (9.00 + j 0.00)
    data[9] = (10.00 + j 0.00)

    After FFTW:
    data[0] = (0.00 + j 0.00)
    data[1] = (-5.00 + j 15.39)
    data[2] = (-5.00 + j 6.88)
    data[3] = (-5.00 + j 3.63)
    data[4] = (-5.00 + j 1.62)
    data[5] = (-5.00 + j 0.00)
    data[6] = (-5.00 + j -1.62)
    data[7] = (-5.00 + j -3.63)
    data[8] = (-5.00 + j -6.88)
    data[9] = (-5.00 + j -15.39)

参考
============

#. `FFTW Tutorial <http://www.fftw.org/doc/Tutorial.html#Tutorial>`_
